var newListNodeData,privateDataMap=new Map;class ListNode{static[Symbol.hasInstance](instance){try{instance.#data}catch(error){return!1}return!0}#data;value;[Symbol.toStringTag]=this.constructor.name;constructor(value,node,append=!1){let targetNodeData,targetListData=null;if(node!==void 0){try{targetNodeData=node.#data}catch(error){throw new TypeError(`node argument (${Object.prototype.toString.call(node)}) is not a ListNode instance`)}if(targetListData=targetNodeData.listData,targetListData!==null&&targetListData.length>=List.maxLength)throw new RangeError(`node.list().length() (${targetListData.length}) would exceed List.maxLength (16777216)`)}let currentNodeData=newListNodeData=this.#data={node:this,listData:targetListData,previous:null,next:null};if(this.value=value,!targetNodeData)return;if(!targetListData)targetNodeData.listData=targetListData=privateDataMap.get(new List),targetListData.first=targetListData.last=targetNodeData,targetListData.length=2,currentNodeData.listData=targetListData;else targetListData.length++;if(!!append===!0){if(targetNodeData.next)targetNodeData.next.previous=currentNodeData,currentNodeData.next=targetNodeData.next;else targetListData.last=currentNodeData;currentNodeData.previous=targetNodeData,targetNodeData.next=currentNodeData}else{if(targetNodeData.previous)targetNodeData.previous.next=currentNodeData,currentNodeData.previous=targetNodeData.previous;else targetListData.first=currentNodeData;currentNodeData.next=targetNodeData,targetNodeData.previous=currentNodeData}}list(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}return this.#data.listData?this.#data.listData.list:null}previous(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}return this.#data.previous?this.#data.previous.node:null}next(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}return this.#data.next?this.#data.next.node:null}prependTo(node){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}let currentNodeData=this.#data,targetNodeData;try{targetNodeData=node.#data}catch(error){throw new TypeError(`node argument (${Object.prototype.toString.call(node)}) is not a ListNode instance`)}let targetListData=targetNodeData.listData;if(targetListData){if(targetListData.length>=List.maxLength)throw new RangeError(`node.list().length() (${targetListData.length}) would exceed List.maxLength (16777216)`);if(currentNodeData===targetNodeData.previous)return this;targetListData.length++}else new List,targetNodeData.listData=targetListData=newListData,targetListData.first=targetNodeData,targetListData.last=targetNodeData,targetListData.length=1;let currentListData=currentNodeData.listData;if(currentListData){if(currentNodeData.previous)currentNodeData.previous.next=currentNodeData.next;else currentListData.first=currentNodeData.next;if(currentNodeData.next)currentNodeData.next.previous=currentNodeData.previous;else currentListData.last=currentNodeData.previous;currentListData.length--}if(currentNodeData.listData=targetListData,targetNodeData.previous)targetNodeData.previous.next=currentNodeData,currentNodeData.previous=targetNodeData.previous;else targetListData.first=currentNodeData;return currentNodeData.next=targetNodeData,targetNodeData.previous=currentNodeData,this}appendTo(node){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}let currentNodeData=this.#data,targetNodeData;try{targetNodeData=node.#data}catch(error){throw new TypeError(`node argument (${Object.prototype.toString.call(node)}) is not a ListNode instance`)}let targetListData=targetNodeData.listData;if(targetListData){if(targetListData.length>=List.maxLength)throw new RangeError(`node.list().length() (${targetListData.length}) would exceed List.maxLength (16777216)`);if(currentNodeData===targetNodeData.next)return this;targetListData.length++}else new List,targetNodeData.listData=targetListData=newListData,targetListData.first=targetNodeData,targetListData.last=targetNodeData,targetListData.length=1;let currentListData=this.#data.listData;if(currentListData){if(currentNodeData.previous)currentNodeData.previous.next=currentNodeData.next;else currentListData.first=currentNodeData.next;if(currentNodeData.next)currentNodeData.next.previous=currentNodeData.previous;else currentListData.last=currentNodeData.previous;currentListData.length--}if(currentNodeData.listData=targetListData,targetNodeData.next)targetNodeData.next.previous=currentNodeData,currentNodeData.next=targetNodeData.next;else targetListData.last=currentNodeData;return currentNodeData.previous=targetNodeData,targetNodeData.next=currentNodeData,targetListData.length++,this}insertInto(list,index=0){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}if(!(list instanceof List))throw new TypeError(`list argument (${list}) is not a List instance`);let targetListData=privateDataMap.get(list);if(targetListData.length>=List.maxLength)throw new RangeError(`list.length() (${targetListData.length}) + 1 would exceed List.maxLength (16777216)`);if(index=Number(index),!Number.isInteger(index))throw new RangeError(`index argument (${index}) is not an integer`);else if(index<0)throw new RangeError(`index argument (${index}) is less than 0`);else if(index>targetListData.length)throw new RangeError(`index argument (${index}) is greater than list.length()`);let currentNodeData=this.#data,currentListData=currentNodeData.listData;if(currentListData){if(currentNodeData.previous)currentNodeData.previous.next=currentNodeData.next;else currentListData.first=currentNodeData.next;if(currentNodeData.next)currentNodeData.next.previous=currentNodeData.previous;else currentListData.last=currentNodeData.previous;currentListData.length--,currentNodeData.listData=null}let targetNodeData=null,append=!1;if(currentNodeData.listData=targetListData,targetListData.length===0)return targetListData.first=targetListData.last=currentNodeData,targetListData.length=1,this;else if(index===0)targetNodeData=targetListData.first;else if(index>=targetListData.length-1){if(targetNodeData=targetListData.last,index===targetListData.length)append=!0}else{let i;if(index<targetListData.length/2){targetNodeData=targetListData.first.next,i=1;while(targetNodeData){if(index===i)break;targetNodeData=targetNodeData.next,i++}}else{targetNodeData=targetListData.last.previous,i=targetListData.length-2;while(targetNodeData){if(index===i)break;targetNodeData=targetNodeData.previous,i--}}}if(targetListData.length++,append){if(targetNodeData.next)targetNodeData.next.previous=currentNodeData,currentNodeData.next=targetNodeData.next;else targetListData.last=currentNodeData;currentNodeData.previous=targetNodeData,targetNodeData.next=currentNodeData}else{if(targetNodeData.previous)targetNodeData.previous.next=currentNodeData,currentNodeData.previous=targetNodeData.previous;else targetListData.first=currentNodeData;currentNodeData.next=targetNodeData,targetNodeData.previous=currentNodeData}return this}remove(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a ListNode instance`)}let nodeData=this.#data,listData=nodeData.listData;if(listData){if(nodeData.previous)nodeData.previous.next=nodeData.next;else listData.first=nodeData.next;if(nodeData.next)nodeData.next.previous=nodeData.previous;else listData.last=nodeData.previous;nodeData.previous=null,nodeData.next=null,listData.length--,nodeData.listData=null}return this}}var newListData;class List{static maxLength=16777216;static[Symbol.hasInstance](instance){try{instance.#data}catch(error){return!1}return!0}#data;[Symbol.toStringTag]=this.constructor.name;constructor(...values){let listData=newListData=this.#data={list:this,first:null,last:null,length:0};privateDataMap.set(this,listData);let length=values[0];if(values.length===1&&typeof length==="number"){if(!Number.isInteger(length))throw new RangeError(`length argument (${length}) is not an integer`);else if(length<0)throw new RangeError(`length argument (${length}) is less than 0`);else if(length>List.maxLength)throw new RangeError(`length argument (${length}) is greater than List.maxLength (16777216)`);if(length>0)new ListNode(void 0),newListNodeData.listData=listData,listData.first=listData.last=newListNodeData,listData.length=1;for(let i=1;i<length;i++)new ListNode(void 0,newListNodeData.node,!0)}else{if(values.length>0)new ListNode(values[0]),newListNodeData.listData=listData,listData.first=listData.last=newListNodeData,listData.length=1;for(let i=1;i<values.length;i++)new ListNode(values[i],newListNodeData.node,!0)}}first(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}return this.#data.first?this.#data.first.node:null}last(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}return this.#data.last?this.#data.last.node:null}at(index){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(index=Number(index),!Number.isInteger(index))throw new RangeError(`index argument (${index}) is not an integer`);else if(index<0||index>listData.length-1)return null;let nodeData;if(index===0)nodeData=listData.first;else if(index===listData.length-1)nodeData=listData.last;else{let i;if(index<listData.length/2){nodeData=listData.first.next,i=1;while(nodeData){if(index===i)break;nodeData=nodeData.next,i++}}else{nodeData=listData.last.previous,i=listData.length-2;while(nodeData){if(index===i)break;nodeData=nodeData.previous,i--}}}return nodeData.node}length(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}return this.#data.length}unshift(...values){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(listData.length+values.length>List.maxLength)throw new RangeError(`this().length() (${listData.length}) would exceed List.maxLength (16777216)`);if(values.length>0){let i=values.length-1;if(listData.length===0)new ListNode(values[i]),newListNodeData.listData=listData,listData.first=listData.last=newListNodeData,listData.length=1,i--;for(i;i>-1;i--)new ListNode(values[i],listData.first.node)}return this.#data.length}push(...values){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(this.#data.length+values.length>List.maxLength)throw new RangeError(`this().length() (${listData.length}) would exceed List.maxLength (16777216)`);if(values.length>0){let i=0;if(listData.length===0)new ListNode(values[i]),newListNodeData.listData=listData,listData.first=listData.last=newListNodeData,listData.length=1,i=1;for(i;i<values.length;i++)new ListNode(values[i],this.#data.last.node,!0)}return this.#data.length}insert(index,...values){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data,valuesLength=values.length;if(listData.length+valuesLength>List.maxLength)throw new RangeError(`this().length() (${listData.length}) would exceed List.maxLength (16777216)`);if(index=Number(index),!Number.isInteger(index))throw new RangeError(`index argument (${index}) is not an integer`);else if(index<0)throw new RangeError(`index argument (${index}) is less than 0`);else if(index>listData.length)throw new RangeError(`index argument (${index}) is greater than this.length() (${listData.length})`);let nodeData,append=!1,i=valuesLength-1;if(index===0){if(listData.length===0)new ListNode(values[i]),newListNodeData.listData=listData,listData.first=listData.last=newListNodeData,listData.length=1,i--;nodeData=listData.first}else if(index>=listData.length-1){if(nodeData=listData.last,index===listData.length)append=!0,i=0}else{let i2;if(index<listData.length/2){nodeData=listData.first.next,i2=1;while(nodeData!==null){if(index===i2)break;nodeData=nodeData.next,i2++}}else{nodeData=listData.last.previous,i2=listData.length-2;while(nodeData!==null){if(index===i2)break;nodeData=nodeData.previous,i2--}}}let node=nodeData.node;if(append)for(i;i<valuesLength;i++)node=new ListNode(values[i],node,append);else for(i;i>-1;i--)node=new ListNode(values[i],node);return listData.length}shift(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(!listData.first)return null;else{let nodeData=listData.first;if(nodeData.next)nodeData.next.previous=null,listData.first=nodeData.next;else listData.first=listData.last=null;return listData.length--,nodeData.previous=null,nodeData.next=null,nodeData.listData=null,nodeData.node}}pop(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(!listData.last)return null;else{let nodeData=listData.last;if(nodeData.previous)nodeData.previous.next=null,listData.last=nodeData.previous;else listData.first=listData.last=null;return listData.length--,nodeData.previous=null,nodeData.next=null,nodeData.listData=null,nodeData.node}}remove(index){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(index=Number(index),!Number.isInteger(index))throw new RangeError(`index argument (${index}) is not an integer`);else if(index<0)throw new RangeError(`index argument (${index}) is less than 0`);else if(index>listData.length-1)throw new RangeError(`index argument (${index}) is greater than this.length() - 1`);let nodeData=null;if(index===0)nodeData=listData.first;else if(index===listData.length-1)nodeData=listData.last;else{let forwards,i;if(index<listData.length/2)forwards=!0,nodeData=listData.first.next,i=1;else forwards=!1,nodeData=listData.last.previous,i=listData.length-2;while(nodeData){if(index===i)break;if(forwards)nodeData=nodeData.next,i++;else nodeData=nodeData.previous,i--}}if(nodeData.previous)nodeData.previous.next=nodeData.next;else nodeData.listData.first=nodeData.next;if(nodeData.next)nodeData.next.previous=nodeData.previous;else nodeData.listData.last=nodeData.previous;return nodeData.previous=null,nodeData.next=null,nodeData.listData=null,listData.length--,nodeData.node}clear(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data,nodeData=listData.first;listData.first=null,listData.last=null,listData.length=0;while(nodeData){let next=nodeData.next;nodeData.listData=null,nodeData.previous=null,nodeData.next=null,nodeData=next}return this}splice(start,end,list,target){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(start=Number(start),!Number.isInteger(start))throw new RangeError(`start argument (${start}) is not an integer`);else if(start<0)throw new RangeError(`start argument (${start}) is less than 0`);else if(start>currentListData.length-1)throw new RangeError(`start argument (${start}) is greater than this.length - 1`);if(end=Number(end),!Number.isInteger(end))throw new RangeError(`end argument (${end}) is not an integer`);else if(end<0)throw new RangeError(`end argument (${end}) is less than 0`);else if(end>currentListData.length-1)throw new RangeError(`end argument (${end}) is greater than this.length - 1`);let rangeLength=Math.abs(start-end)+1,targetListData;if(list!==void 0){try{this.#data}catch(error){throw new TypeError(`list argument (${Object.prototype.toString.call(list)}) is not a List instance`)}if(targetListData=list.#data,targetListData.length+rangeLength>List.maxLength)throw new RangeError(`list.length() (${targetListData.length}) would be greater than List.maxLength (16777216)`);if(target===void 0)throw new TypeError("target argument is undefined");if(target=Number(target),!Number.isInteger(target))throw new RangeError(`target argument (${target}) is not an integer`);else if(target<0)throw new RangeError(`target argument (${target}) is less than 0`);else if(currentListData===targetListData){if(target>targetListData.length-rangeLength)throw new RangeError(`target argument (${target}) would be greater than this.length() (${targetListData.length-rangeLength}) after removing the specified nodes`)}else if(target>targetListData.length)throw new RangeError(`target argument (${target}) is greater than list.length()`)}else list=new List,targetListData=list.#data;let targetNodeData=null;if(end<start){let _end=end;end=start,start=_end}let forwards=start>currentListData.length-end-1?!1:!0,startNodeData=null,endNodeData=null,currentNodeData=null,previous=null,next=null,i;if(forwards)currentNodeData=currentListData.first,i=0;else currentNodeData=currentListData.last,i=currentListData.length-1;while(currentNodeData){if(i>=start&&i<=end){if(currentNodeData.listData=targetListData,i===start){if(startNodeData=currentNodeData,currentNodeData.previous)previous=currentNodeData.previous;currentNodeData.previous=null}if(i===end){if(endNodeData=currentNodeData,currentNodeData.next)next=currentNodeData.next;currentNodeData.next=null}}if(startNodeData&&endNodeData)break;if(forwards)currentNodeData=currentNodeData.next,i++;else currentNodeData=currentNodeData.previous,i--}if(previous)previous.next=next;else currentListData.first=next;if(next)next.previous=previous;else currentListData.last=previous;currentListData.length-=rangeLength;let append=!1;if(targetListData.length===0)return targetListData.first=startNodeData,targetListData.last=endNodeData,targetListData.length+=rangeLength,targetListData.list;else if(target===0)targetNodeData=targetListData.first;else if(target>=targetListData.length-1){if(targetNodeData=targetListData.last,target===targetListData.length)append=!0}else if(!targetNodeData)if(target<targetListData.length/2){currentNodeData=targetListData.first.next,i=1;while(currentNodeData){if(i===target){targetNodeData=currentNodeData;break}currentNodeData=currentNodeData.next,i++}}else{currentNodeData=targetListData.last.previous,i=targetListData.length-2;while(currentNodeData){if(i===target){targetNodeData=currentNodeData;break}currentNodeData=currentNodeData.previous,i--}}if(append){if(targetNodeData.next)targetNodeData.next.previous=endNodeData;else targetListData.last=endNodeData;startNodeData.previous=targetNodeData,endNodeData.next=targetNodeData.next,targetNodeData.next=startNodeData}else{if(targetNodeData.previous)targetNodeData.previous.next=startNodeData;else targetListData.first=startNodeData;startNodeData.previous=targetNodeData.previous,endNodeData.next=targetNodeData,targetNodeData.previous=endNodeData}return targetListData.length+=rangeLength,targetListData.list}fill(value){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(listData.length===0)return this;let nodeData=listData.first;while(nodeData)nodeData.node.value=value,nodeData=nodeData.next;return this}reverse(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let listData=this.#data;if(listData.length===0)return this;let nodeData=listData.first;while(nodeData){let{previous,next}=nodeData;nodeData.previous=next,nodeData.next=previous,nodeData=next}let{first,last}=listData;return listData.first=last,listData.last=first,this}copyWithin(start,end,target,targetEnd=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(start=Number(start),!Number.isInteger(start)||start<0||start>currentListData.length-1)throw new RangeError(`start argument (${start}) is not a integer greater than -1 or less than this.length() (${currentListData.length})`);if(end=Number(end),!Number.isInteger(end)||end<0||end>currentListData.length-1)throw new RangeError(`end argument (${end}) is not a integer greater than -1 or less than this.length() (${currentListData.length})`);if(target=Number(target),!Number.isInteger(target)||target<0||target>currentListData.length-1)throw new RangeError(`target argument (${target}) is not a integer greater than -1 or less than this.length() (${currentListData.length})`);if(end<start){let _end=end;end=start,start=_end}if(targetEnd=!!targetEnd,start===target&&targetEnd===!1)return this;else if(end===target&&targetEnd===!0)return this;let currentNodeData,targetNodeData,i;if(target===0)targetNodeData=currentListData.first;else if(target===currentListData.length-1)targetNodeData=currentListData.last;else if(target<currentListData.length/2){currentNodeData=currentListData.first.next,i=1;while(currentNodeData){if(i===target){targetNodeData=currentNodeData;break}currentNodeData=currentNodeData.next,i++}}else{currentNodeData=currentListData.last.previous,i=currentListData.length-2;while(currentNodeData){if(i===target){targetNodeData=currentNodeData;break}currentNodeData=currentNodeData.previous,i--}}let values=[],range=end-start+1;if(start<currentListData.length-end-1){currentNodeData=currentListData.first,i=0;while(currentNodeData){if(i>=start&&i<=end){if(values.push(currentNodeData.node.value),values.length===range)break}currentNodeData=currentNodeData.next,i++}}else{currentNodeData=currentListData.last,i=currentListData.length-1;while(currentNodeData){if(i>=start&&i<=end){if(values.unshift(currentNodeData.node.value),values.length===range)break}currentNodeData=currentNodeData.previous,i--}}if(targetEnd===!0)i=values.length-1;else i=0;while(targetNodeData){if(targetNodeData.node.value=values[i],targetEnd)targetNodeData=targetNodeData.previous,i--;else targetNodeData=targetNodeData.next,i++;if(i<0||i>values.length-1)break}return this}sort(callback){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback (${typeof callback} is not a function)`);let nodes=[],nodeData=this.#data.first,i=0;while(nodeData)nodes[i]=nodeData.node,nodeData=nodeData.next,i++;let values=nodes.sort(callback).map(({value})=>value);nodeData=this.#data.first,i=0;while(nodeData)nodeData.node.value=values[i],nodeData=nodeData.next,i++;return this}flat(depth=1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(depth=Number(depth),!Number.isInteger(depth)||depth<1)throw new RangeError(`depth argument (${depth}) is not an integer greater than 0`);let i=0,stack=[];stack.unshift({nodeData:this.#data.first});callStack:while(stack.length>0){let data=stack[0],{nodeData}=data;while(nodeData){if(data.nodeData=nodeData.next,nodeData.node.value instanceof List&&stack.length<=depth){stack.unshift({nodeData:nodeData.node.value.#data.first});continue callStack}else if(++i>List.maxLength)throw new RangeError(`this.length() (${i}) would exceed List.maxLength (16777216)`);nodeData=data.nodeData}stack.shift()}i=0,stack.unshift({nodeData:this.#data.first});callStack:while(stack.length>0){let{nodeData}=stack[0];while(nodeData){if(nodeData.node.value instanceof List&&stack.length<=depth){stack.unshift({nodeData:nodeData.node.value.#data.first});continue callStack}else if(stack.length>1)if(stack[stack.length-1].nodeData.node.value instanceof List)stack[stack.length-1].nodeData.node.value=nodeData.node.value;else new ListNode(nodeData.node.value,stack[stack.length-1].nodeData.node,!0),stack[stack.length-1].nodeData=stack[stack.length-1].nodeData.next;nodeData=stack[0].nodeData=nodeData.next}if(stack.shift(),stack.length>0)stack[0].nodeData=stack[0].nodeData.next}return this}slice(start=0,end=this.#data.length-1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(start=Number(start),!Number.isInteger(start)||start<0||start>currentListData.length-1)throw new RangeError(`start argument (${start}) is not a integer greater than -1 or less than this.length() (${currentListData.length})`);if(end=Number(end),!Number.isInteger(end)||end<0||end>currentListData.length-1)throw new RangeError(`end argument (${end}) is not a integer greater than -1 or less than this.length() (${currentListData.length})`);if(end<start){let _end=end;end=start,start=_end}let currentNodeData=null,i,targetNode;if(start<currentListData.length-end-1){currentNodeData=currentListData.first,i=0;while(currentNodeData){if(i>=start&&i<=end)targetNode=new ListNode(currentNodeData.node.value,targetNode,!0);currentNodeData=currentNodeData.next,i++}}else{currentNodeData=currentListData.last,i=currentListData.length-1;while(currentNodeData){if(i>=start&&i<=end)targetNode=new ListNode(currentNodeData.node.value,targetNode);currentNodeData=currentNodeData.previous,i--}}if(!targetNode.list())targetNode.insertInto(new List);return targetNode.list()}includes(value,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(currentListData.length===0)return!1;let nodeData=null,i;if(!!backwards===!0){nodeData=currentListData.last,i=currentListData.length-1;while(nodeData){if(nodeData.node.value===value)return!0;nodeData=nodeData.previous,i--}}else{nodeData=currentListData.first,i=0;while(nodeData){if(nodeData.node.value===value)return!0;nodeData=nodeData.next,i++}}return!1}indexOf(value,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(currentListData.length===0)return-1;let nodeData=null,i;if(!!backwards===!0)nodeData=currentListData.last,i=currentListData.length-1;else nodeData=currentListData.first,i=0;while(nodeData){if(nodeData.node.value===value)return i;if(backwards)nodeData=nodeData.previous,i--;else nodeData=nodeData.next,i++}return-1}find(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return null;let nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)return nodeData.node;nodeData=nodeData.previous,index--}}else{nodeData=currentListData.first,index=0;while(nodeData){if(callback.call(self,nodeData.node,index,this)===!0)return nodeData.node;nodeData=nodeData.next,index++}}return null}findIndex(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return-1;let nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)return index;nodeData=nodeData.previous,index--}}else{nodeData=currentListData.first,index=0;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)return index;nodeData=nodeData.next,index++}}return-1}some(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return!1;let nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)return!0;nodeData=nodeData.previous,index--}}else{nodeData=currentListData.first,index=0;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)return!0;nodeData=nodeData.next,index++}}return!1}every(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return!1;let nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)!==!0)return!1;nodeData=nodeData.previous,index--}}else{nodeData=currentListData.first,index=0;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)!==!0)return!1;nodeData=nodeData.next,index++}}return!0}reduce(callback,initialValue,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return initialValue;let nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData)initialValue=callback.call(self,initialValue,nodeData.node,index,this),nodeData=nodeData.previous,index--}else{nodeData=currentListData.first,index=0;while(nodeData)initialValue=callback.call(self,initialValue,nodeData.node,index,this),nodeData=nodeData.next,index++}return initialValue}filter(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return this;let nodeDataArray=[],nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)nodeDataArray.push(nodeData);nodeData=nodeData.previous,index--}}else{nodeData=currentListData.first,index=0;while(nodeData){if(!!callback.call(self,nodeData.node,index,this)===!0)nodeDataArray.push(nodeData);nodeData=nodeData.next,index++}}for(let nodeData2 of nodeDataArray){if(nodeData2.previous)nodeData2.previous.next=nodeData2.next;else nodeData2.listData.first=nodeData2.next;if(nodeData2.next)nodeData2.next.previous=nodeData2.previous;else nodeData2.listData.last=nodeData2.previous;nodeData2.previous=null,nodeData2.next=null,nodeData2.listData=null,currentListData.length--}return this}map(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return this;let values=[],nodeData=null,index;if(!!backwards===!0){nodeData=currentListData.last,index=currentListData.length-1;while(nodeData)values.push(callback.call(self,nodeData.node,index,this)),nodeData=nodeData.previous,index--}else{nodeData=currentListData.first,index=0;while(nodeData)values.push(callback.call(self,nodeData.node,index,this)),nodeData=nodeData.next,index++}nodeData=currentListData.first,index=0;while(nodeData)nodeData.node.value=values[index],nodeData=nodeData.next,index++;return this}forEach(callback,self=null,backwards=!1){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}if(typeof callback!=="function")throw new TypeError(`callback argument (${typeof callback}) is not a function`);let currentListData=this.#data;if(currentListData.length===0)return this;let nodeData=null,index;if(!!backwards===!0)nodeData=currentListData.last,index=currentListData.length-1;else nodeData=currentListData.first,index=0;while(nodeData)if(callback.call(self,nodeData.node,index,this),backwards)nodeData=nodeData.previous,index--;else nodeData=nodeData.next,index++;return this}concat(...values){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let length=this.#data.length;if(length+values.length===0)return new List;else if(length+values.length>List.maxLength)throw new RangeError(`the new list length (${length+values.length}) would exceed List.maxLength (16777216)`);for(let value2 of values)if(value2 instanceof List)length+=value2.#data.length;else length++;if(length>List.maxLength)throw new RangeError(`the new list length (${length}) would exceed List.maxLength (16777216)`);let targetNode,nodeData=null,value=values[0],i=0;if(this.#data.length>0){targetNode=new ListNode(this.#data.first.node.value),nodeData=this.#data.first.next;while(nodeData)targetNode=new ListNode(nodeData.node.value,targetNode,!0),nodeData=nodeData.next}else if(i++,value instanceof List&&value.#data.length>0){nodeData=value.#data.first,targetNode=new ListNode(nodeData.node.value),nodeData=nodeData.next;while(nodeData)targetNode=new ListNode(nodeData.node.value,targetNode,!0),nodeData=nodeData.next}else targetNode=new ListNode(value);for(i;i<values.length;i++)if(value=values[i],value instanceof List){nodeData=value.#data.first;while(nodeData)targetNode=new ListNode(nodeData.node.value,targetNode,!0),nodeData=nodeData.next}else targetNode=new ListNode(value,targetNode,!0);return targetNode.list()}nodes(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(currentListData.length===0)return[];let array=new Array(currentListData.length),nodeData=this.#data.first,i=0;while(nodeData)array[i]=nodeData.node,nodeData=nodeData.next,i++;return array}values(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(currentListData.length===0)return[];let array=new Array(currentListData.length),nodeData=this.#data.first,i=0;while(nodeData)array[i]=nodeData.node.value,nodeData=nodeData.next,i++;return array}toString(){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data,listString="";if(currentListData.length===0)return listString;let value=currentListData.first.node.value;listString+=typeof value==="object"?Object.prototype.toString.call(value):value;let nodeData=currentListData.first.next,index=1;while(nodeData)value=nodeData.node.value,listString+=","+(typeof value==="object"?Object.prototype.toString.call(value):value),nodeData=nodeData.next,index++;return listString}[Symbol.iterator](){try{this.#data}catch(error){throw new TypeError(`this (${Object.prototype.toString.call(this)}) is not a List instance`)}let currentListData=this.#data;if(currentListData.length===0)return[][Symbol.iterator]();let array=new Array(currentListData.length),nodeData=this.#data.first,i=0;while(nodeData)array[i]=nodeData.node,nodeData=nodeData.next,i++;return array[Symbol.iterator]()}}Object.defineProperty(ListNode,Symbol.hasInstance,{configurable:!1,writable:!1,enumerable:!1,value:ListNode[Symbol.hasInstance]});Object.defineProperty(List,"maxLength",{configurable:!1,writable:!1,enumerable:!0,value:List.maxLength});Object.defineProperty(List,Symbol.hasInstance,{configurable:!1,writable:!1,enumerable:!1,value:List[Symbol.hasInstance]});var propertyNames=Object.getOwnPropertyNames(ListNode.prototype);propertyNames.push(...Object.getOwnPropertySymbols(ListNode.prototype));propertyNames.forEach((name)=>{Object.defineProperty(ListNode.prototype,name,{configurable:!1,writable:!1,enumerable:typeof name==="string"?!0:!1,value:ListNode.prototype[name]})});propertyNames=Object.getOwnPropertyNames(List.prototype);propertyNames.push(...Object.getOwnPropertySymbols(List.prototype));propertyNames.forEach((name)=>{Object.defineProperty(List.prototype,name,{configurable:!1,writable:!1,enumerable:typeof name==="string"?!0:!1,value:List.prototype[name]})});export{ListNode,List};
